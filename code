#include <WiFi101.h>
#include <ArduinoJson.h>
#include <ArduinoHttpClient.h>


// ARTIK Cloud REST endpoint
char server[] = "api.artik.cloud";  
int port = 443; // We're using HTTPS

// Device ID tokens 
String deviceToken = "ecdbca46177e40998481329f20c7e3ff"; 
String deviceId = "df349633adb9497fa68bfcbda7d65cdf"; 

// Your wifi network 
char ssid[] = "BTHub6-S9S9";      
char pass[] = "bYeyRDnbQ9C6"; 

char buf[200]; // buffer to store the JSON to be sent to the ARTIK cloud

WiFiSSLClient wifi;
HttpClient client = HttpClient(wifi, server, port);

int status = WL_IDLE_STATUS;


void setup() 

{

  pinMode(10,INPUT);
  pinMode(11,INPUT);
  
  Serial.begin(9600); //begin serial monitor

while ( status != WL_CONNECTED) { // Keep trying until connected
    Serial.print("Attempting to connect to Network named: ");
    Serial.println(ssid);                  
    // Connect to WPA/WPA2 network:
    status = WiFi.begin(ssid, pass);
  }
  
  //delay(800); //delay for serial monitor to initialise
}

void loop() {

Serial.print("Begin loop \n"); //loop beginning


  Serial.println("making POST request");
  String contentType = "application/json";
  String AuthorizationData = "Bearer " + deviceToken; //Device Token

 // if((digitalRead(10)==1)||(digitalRead(11)==1)){
 //     Serial.println("!");
 // }
 // else{
 //     Serial.println(analogRead(A1));
 // }
 // delay(10);
 // Serial.end();
 // delay(1);

 int ecg = analogRead(A1);

  
  int len = loadBuffer(ecg);  
  Serial.println("Sending data "+String(ecg)); 

    // push the data to the ARTIK Cloud
  client.beginRequest();
  client.post("/v1.1/messages"); //, contentType, buf
  client.sendHeader("Authorization", AuthorizationData);
  client.sendHeader("Content-Type", "application/json");
  client.sendHeader("Content-Length", len);
  client.endRequest();
  client.print(buf);

  // read the status code and body of the response
  int statusCode = client.responseStatusCode();
  String response = client.responseBody();

  Serial.print("Status code: ");
  Serial.println(statusCode);
  
  Serial.print("Response: ");
  Serial.println(response);


Serial.print("End loop \n"); //loop ends



  
}

int loadBuffer(float ecg) {  
   StaticJsonBuffer<200> jsonBuffer; // reserve spot in memory

   JsonObject& root = jsonBuffer.createObject(); // create root objects
     root["sdid"] =  deviceId;  
     root["type"] = "message";

   JsonObject& dataPair = root.createNestedObject("data"); // create nested objects
     dataPair["Heartbeat"] = ecg;  
     

   root.printTo(buf, sizeof(buf)); // JSON-print to buffer

   return (root.measureLength()); // also return length
 }
